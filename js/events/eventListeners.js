/**
 * ============================================================================
 * Fichier         : eventListeners.js
 * RÃ´le            : Centralisation des Ã©couteurs dâ€™Ã©vÃ©nements pour TOUTES les pages
 * Auteur          : TrackJnr
 * DerniÃ¨re MAJ    : 23/03/2025
 * ============================================================================
 */

import { getCurrentPage, domSelectors } from '../config/domSelectors.js';
import { logEvent } from '../utils/utils.js';
import { initvalidform } from '../components/formulaire/contactform.js';
import { initGameMain } from '../components/game/core/game-init.js';
import { handleKeyboardEvent } from './keyboardHandler.js';
import {
  handleModalConfirm,
  handleFormSubmit,
} from './eventHandler.js';

/** ============================================================================
 * INIT GLOBAL â€” Menu burger & Clavier
 * ============================================================================
 */
function bindGlobalEvents() {
  logEvent('info', '[Global] Initialisation des Ã©couteurs globaux');

  const menuBtn = domSelectors.nav.menuButton;
  const {navLinks} = domSelectors.nav;

  if (menuBtn && navLinks) {
    menuBtn.addEventListener('click', () => {
      navLinks.classList.toggle('active');
      menuBtn.classList.toggle('active');
      logEvent('info', '[Global] Menu burger togglÃ©');
    });
  }

  // Ã‰couteur clavier global (accessibilitÃ©, navigation lightbox, etc.)
  document.addEventListener('keydown', handleKeyboardEvent);
  logEvent('success', '[Global] Ã‰couteur clavier actif');
}

/** ============================================================================
 * INDEX.HTML
 * ============================================================================
 */
function bindIndexEvents() {
  const cards = document.querySelectorAll('.card-link');
  cards.forEach(card => {
    card.addEventListener('click', () => {
      logEvent('info', '[Index] Navigation vers un projet');
    });
  });

  const {gameLauncher} = domSelectors.game;
  if (gameLauncher) {
    gameLauncher.addEventListener('click', () => {
      logEvent('info', '[Index] Lancement du jeu cachÃ©');
      initGameMain();
    });
  }
}

/** ============================================================================
 * CONTACT.HTML
 * ============================================================================
 */
function bindContactEvents() {
  const contactForm = domSelectors.contact.form;
  if (contactForm) {
    contactForm.addEventListener('submit', (e) => {
      e.preventDefault();
      initvalidform();
    });
    logEvent('info', '[Contact] Ã‰couteur sur formulaire OK');
  }
}

/** ============================================================================
 * PROJET.HTML
 * ============================================================================
 */
function bindProjetEvents() {
  logEvent('info', '[Projet] Initialisation des onglets dynamiques');
  setupTabSwitching();
  setupLightbox();

}

/** ============================================================================
 * APROPOS.HTML
 * ============================================================================
 */
function bindAproposEvents() {
  const teamLinks = domSelectors?.apropos?.teamLinks || [];
  teamLinks.forEach(link => {
    link.addEventListener('mouseenter', () => {
      link.classList.add('hovered');
    });
    link.addEventListener('mouseleave', () => {
      link.classList.remove('hovered');
    });
  });

  const externalLink = domSelectors?.apropos?.externalLink;
  if (externalLink) {
    externalLink.addEventListener('click', () => {
      logEvent('info', '[Ã€ Propos] Redirection vers site externe');
    });
  }

  logEvent('success', '[Apropos] Ã‰vÃ©nements hover & clic initialisÃ©s');
}

/** ============================================================================
 * ETAPES / CONCLUSION / PAGES STATIQUES
 * ============================================================================
 */
function bindStaticPagesEvents(pageName) {
  logEvent('info', `[${pageName}] Aucune interaction dynamique prÃ©vue`);
}

/** ============================================================================
 * ROUTEUR Dâ€™Ã‰COUTEURS â€” DÃ©tecte la page en cours et applique les listeners
 * ============================================================================
 */
function dispatchPageSpecificListeners() {
  const currentPage = getCurrentPage();
  logEvent('info', `[Router] Dispatch vers : ${currentPage}`);

  switch (currentPage) {
    case 'index':
      bindIndexEvents();
      break;
    case 'contact':
      bindContactEvents();
      break;
    case 'projet':
      bindProjetEvents();
      break;
    case 'apropos':
      bindAproposEvents();
      break;
    case 'conclusion':
    case 'etapes-alim':
    case 'etapes-site':
      bindStaticPagesEvents(currentPage);
      break;
    default:
      logEvent('warn', `[Router] Aucun bind prÃ©vu pour : "${currentPage}"`);
  }
}
// ============================
// Fonction : setupTabSwitching
// ============================

export function setupTabSwitching() {
  const allTabButtons = document.querySelectorAll(".tab-button");
  const allTabContents = document.querySelectorAll(".tab-content");

  if (!allTabButtons.length || !allTabContents.length) {
    console.warn("Aucun onglet trouvÃ© Ã  initialiser.");
    return;
  }

  allTabButtons.forEach(button => {
    button.addEventListener("click", () => {
      const targetId = button.getAttribute("data-tab");

      if (!targetId) return;

      // RÃ©cupÃ¨re le conteneur parent de la carte projet
      const projectCard = button.closest(".project-card");

      // ðŸ”¹ Onglets et contenus dans ce seul projet
      const tabButtons = projectCard.querySelectorAll(".tab-button");
      const tabContents = projectCard.querySelectorAll(".tab-content");

      // ðŸ”„ DÃ©sactive tous les boutons
      tabButtons.forEach(btn => btn.classList.remove("active"));

      // ðŸ”„ Masque tous les contenus
      tabContents.forEach(content => content.classList.remove("active"));

      // âœ… Active le bouton cliquÃ©
      button.classList.add("active");

      // âœ… Affiche le bon contenu
      const targetContent = projectCard.querySelector(`#${targetId}`);
      if (targetContent) {
        targetContent.classList.add("active");
      }
    });
  });
}
/**
 * ============================================================================
 * Fonction : setupLightbox
 * ============================================================================
 * Initialise les comportements de la lightbox 
 */
function setupLightbox() {
  const lightboxLinks = document.querySelectorAll('a.lightbox');

  if (!lightboxLinks.length) {
    logEvent('info', '[Projet] Aucun lien lightbox dÃ©tectÃ©');
    return;
  }

  lightboxLinks.forEach(link => {
    link.addEventListener('click', event => {
      event.preventDefault();
      const imageSrc = link.getAttribute('href');
      openLightbox(imageSrc);
    });
  });

  logEvent('success', '[Projet] Lightbox activÃ©e sur les mÃ©dias');
}
/**
 * =============================================================================
 * Fonction : initModal
 * =============================================================================
 * Initialise la modale de contact et assure la gestion des Ã©vÃ©nements associÃ©s.
 *
 * - VÃ©rifie que les Ã©lÃ©ments DOM de la modale existent avant dâ€™attacher les Ã©vÃ©nements.
 * - Attache les Ã©vÃ©nements nÃ©cessaires pour ouvrir et fermer la modale.
 * - Active un **MutationObserver** si le bouton de contact n'est pas immÃ©diatement disponible.
 * - Capture les erreurs potentielles et assure la robustesse du processus.
 */
export function initModal() {
  try {
      logEvent("info", "âž¡ Initialisation de la modale de contact...");

      // VÃ©rification immÃ©diate de la prÃ©sence du bouton de contact
      const contactButton = document.querySelector(".contact-button");

      if (contactButton) {
          logEvent("info", " Bouton de contact trouvÃ© immÃ©diatement.");
          attachModalEvents(); // Attache directement les Ã©vÃ©nements si le bouton est prÃ©sent
      } else {
          logEvent("warning", " Bouton de contact non trouvÃ©. Activation de l'observation DOM...");
          observeDOMForContactButton(); // Lance un observateur pour dÃ©tecter son apparition
      }

  } catch (error) {
      logEvent("error", " initModal : Erreur lors de l'initialisation de la modale.", { error });
      throw new Error(`Erreur critique dans initModal : ${error.message}`);
  }
}



/**
* =============================================================================
* Fonction : attachModalEvents
* =============================================================================
* Attache tous les Ã©vÃ©nements nÃ©cessaires pour gÃ©rer la modale de contact.
*
* - GÃ¨re l'ouverture et la fermeture de la modale.
* - VÃ©rifie l'existence des Ã©lÃ©ments DOM avant d'attacher les Ã©vÃ©nements.
* - Ajoute un mÃ©canisme pour Ã©viter les attachements multiples.
* - Capture les entrÃ©es utilisateur dans les champs du formulaire.
* - GÃ¨re la soumission du formulaire et les modales associÃ©es.
*
* @throws {Error} Enregistre et remonte toute erreur critique dans les logs.
*/
export function attachModalEvents() {
  try {
      logEvent("info", "Attachement des Ã©vÃ©nements de la modale...");

      // RÃ©cupÃ©ration dynamique du bouton de contact
      const contactButton = document.querySelector(".contact-button");

      if (!contactButton) {
          logEvent("error", "Bouton de contact introuvable.");
          return;
      }

      // EmpÃªche l'attachement multiple
      if (!contactButton.dataset.eventAttached) {
          contactButton.dataset.eventAttached = "true";
          contactButton.addEventListener("click", () => {
              logEvent("info", "Clic sur le bouton Contact.");
              handleModalOpen();
          });
          logEvent("success", "Ã‰vÃ©nement attachÃ© au bouton Contact.");
      }

      // RÃ©cupÃ©ration des Ã©lÃ©ments principaux de la modale
      const { modalOverlay, contactForm, closeButton, form, confirmationModal, spamModal } = domSelectors.modal;

      if (!modalOverlay || !contactForm || !closeButton || !form) {
          logEvent("error", "Certains Ã©lÃ©ments de la modale sont introuvables.");
          return;
      }

      // Attachement des Ã©vÃ©nements de fermeture de la modale
      attachEvent(closeButton, "click", handleModalClose);
      attachEvent(modalOverlay, "click", handleModalClose);

      document.addEventListener("keydown", (event) => {
          if (event.key === "Escape") {
              logEvent("info", "Touche Ã‰chap dÃ©tectÃ©e, fermeture de la modale.");
              handleModalClose();
          }
      });

      // Attachement des Ã©vÃ©nements au formulaire de contact
      if (form) {
          // Bouton d'envoi du formulaire
          if (form.submitButton && !form.submitButton.dataset.eventAttached) {
              form.submitButton.dataset.eventAttached = "true";
              attachEvent(form.submitButton, "click", (event) => {
                  event.preventDefault();
                  logEvent("info", "Formulaire soumis.");
                  handleFormSubmit();
              });
              logEvent("success", "Ã‰vÃ©nement attachÃ© au bouton d'envoi du formulaire.");
          }

          // Gestion des champs du formulaire avec logs de saisie
          const formFields = [
              { element: form.firstName, logMessage: "Saisie du prÃ©nom." },
              { element: form.lastName, logMessage: "Saisie du nom." },
              { element: form.email, logMessage: "Saisie de l'email." },
              { element: form.messageField, logMessage: "Saisie du message." },
          ];

          formFields.forEach(({ element, logMessage }) => {
              if (element && !element.dataset.eventAttached) {
                  element.dataset.eventAttached = "true";
                  attachEvent(element, "input", () => logEvent("info", logMessage));
              }
          });
      }

      // Gestion de la confirmation aprÃ¨s soumission du formulaire
      if (confirmationModal?.confirmButton) {
          attachEvent(confirmationModal.confirmButton, "click", handleModalClose);
      }

      // Gestion de la modale de dÃ©tection de spam
      if (spamModal?.closeButton) {
          attachEvent(spamModal.closeButton, "click", handleModalClose);
      }

      logEvent("success", "Tous les Ã©vÃ©nements de la modale sont attachÃ©s avec succÃ¨s.");
  
  } catch (error) {
      logEvent("error", "Une erreur est survenue lors de l'attachement des Ã©vÃ©nements de la modale.", { error });
      throw new Error(`Erreur critique dans attachModalEvents : ${error.message}`);
  }
}

/**
* =============================================================================
* Fonction : observeDOMForContactButton
* =============================================================================
* Surveille le DOM pour dÃ©tecter l'apparition dynamique du bouton de contact.
*
* - Utilise un **MutationObserver** pour surveiller les changements dans le `document.body`.
* - Attache les Ã©vÃ©nements de la modale dÃ¨s que le bouton est dÃ©tectÃ©.
* - DÃ©connecte l'observation aprÃ¨s la premiÃ¨re dÃ©tection pour Ã©viter les Ã©coutes inutiles.
* - Capture et logue toute erreur pouvant survenir.
*
* @throws {Error} Enregistre toute erreur critique lors de l'observation du DOM.
*/
function observeDOMForContactButton() {
  try {
      logEvent("info", "Initialisation de l'observation du DOM pour le bouton de contact...");

      // CrÃ©ation de l'observateur
      const observer = new MutationObserver((mutations, obs) => {
          try {
              // Recherche du bouton de contact dans le DOM
              const button = document.querySelector(".contact-button");

              if (button) {
                  logEvent("success", "Bouton de contact dÃ©tectÃ© par MutationObserver.");

                  // Attache les Ã©vÃ©nements nÃ©cessaires Ã  la modale
                  attachModalEvents();

                  // ArrÃªte l'observation une fois que le bouton a Ã©tÃ© trouvÃ©
                  obs.disconnect();
                  logEvent("info", "MutationObserver arrÃªtÃ© aprÃ¨s dÃ©tection du bouton.");
              }
          } catch (error) {
              logEvent("error", "Erreur lors de l'observation du DOM.", { error });
              obs.disconnect(); // Assure l'arrÃªt de l'observateur en cas d'erreur
              throw new Error(`Erreur critique dans observeDOMForContactButton : ${error.message}`);
          }
      });

      // DÃ©finition des paramÃ¨tres d'observation
      observer.observe(document.body, {
          childList: true, // Surveille l'ajout/suppression d'Ã©lÃ©ments dans le body
          subtree: true, // Inclut tous les nÅ“uds enfants
      });

      logEvent("info", "Observation du DOM activÃ©e pour dÃ©tecter le bouton de contact.");

  } catch (error) {
      logEvent("error", "Ã‰chec de l'initialisation de l'observation du DOM.", { error });
      throw new Error(`Erreur critique lors du lancement de observeDOMForContactButton : ${error.message}`);
  }
}

/**
* =============================================================================
* Fonction : initModalConfirm
* =============================================================================
* Initialise l'Ã©vÃ©nement de confirmation pour la modale.
*
* - VÃ©rifie si le bouton de confirmation est prÃ©sent dans le DOM.
* - Attache un Ã©vÃ©nement `click` pour gÃ©rer la validation.
* - Capture et logue toute erreur pouvant survenir.
* - Ã‰vite les attachements multiples en vÃ©rifiant les Ã©vÃ©nements dÃ©jÃ  liÃ©s.
*
* @throws {Error} Enregistre toute erreur critique lors de l'initialisation.
*/
export function initModalConfirm() {
  try {
      logEvent("info", "Initialisation de l'Ã©vÃ©nement de confirmation...");

      // SÃ©lectionne le bouton de confirmation dans le DOM
      const confirmButton = document.querySelector(".confirm-btn");

      // VÃ©rification de l'existence du bouton
      if (!confirmButton) {
          logEvent("error", "Bouton de confirmation introuvable.");
          throw new Error("Le bouton de confirmation n'a pas Ã©tÃ© trouvÃ© dans le DOM.");
      }

      // EmpÃªche l'attachement multiple de l'Ã©vÃ©nement
      if (confirmButton.dataset.eventAttached) {
          logEvent("warn", "L'Ã©vÃ©nement de confirmation est dÃ©jÃ  attachÃ©.");
          return;
      }

      // Marque le bouton pour Ã©viter les attachements multiples
      confirmButton.dataset.eventAttached = "true";

      // Attache l'Ã©vÃ©nement "click" au bouton de confirmation
      attachEvent(confirmButton, "click", handleModalConfirm);

      logEvent("success", "Ã‰vÃ©nement de confirmation attachÃ© avec succÃ¨s.");

  } catch (error) {
      logEvent("error", `Erreur critique dans initModalConfirm : ${error.message}`);
      throw new Error(`Erreur lors de l'initialisation de la confirmation : ${error.message}`);
  }
}



/** =============================================================================
* Fonction : setupContactFormEvents
* =============================================================================
* Initialise et gÃ¨re les Ã©vÃ©nements du formulaire de contact.
*
* - Surveille l'entrÃ©e utilisateur dans le champ "message".
* - Met Ã  jour dynamiquement le compteur de caractÃ¨res en temps rÃ©el.
* - EmpÃªche le dÃ©passement de la limite de caractÃ¨res dÃ©finie.
* - VÃ©rifie la prÃ©sence des Ã©lÃ©ments requis avant d'attacher les Ã©vÃ©nements.
* - Capture et logue toute erreur pouvant survenir.
*
* @throws {Error} Si un Ã©lÃ©ment requis est introuvable dans le DOM.
*/
export function setupContactFormEvents() {
  try {
      logEvent("info", "Initialisation des Ã©vÃ©nements du formulaire de contact...");

      // RÃ©cupÃ©ration sÃ©curisÃ©e de l'Ã©lÃ©ment du champ message
      const { messageField, charCounter } = domSelectors.modal.form;

      // VÃ©rification de l'existence du champ "message"
      if (!messageField) {
          logEvent("error", "Champ 'message' introuvable. VÃ©rifiez la structure du DOM.");
          throw new Error("Le champ 'message' est introuvable dans le DOM.");
      }

      // VÃ©rification de l'existence du compteur de caractÃ¨res
      if (!charCounter) {
          logEvent("warn", "Compteur de caractÃ¨res introuvable. La mise Ã  jour dynamique sera dÃ©sactivÃ©e.");
      }

      // EmpÃªche l'attachement multiple de l'Ã©vÃ©nement
      if (messageField.dataset.eventAttached) {
          logEvent("warn", "L'Ã©vÃ©nement 'input' sur le champ message est dÃ©jÃ  attachÃ©.");
          return;
      }

      // Marque l'Ã©lÃ©ment comme ayant un Ã©vÃ©nement dÃ©jÃ  attachÃ©
      messageField.dataset.eventAttached = "true";

      
  } catch (error) {
      logEvent("error", `Erreur dans setupContactFormEvents : ${error.message}`);
      throw new Error(`Erreur lors de l'initialisation du formulaire de contact : ${error.message}`);
  }
}


/**
 * ============================================================================
 * Fonction : openLightbox
 * ============================================================================
 * Ouvre une modale pleine page avec l'image cliquÃ©e
 * @param {string} src - Lien vers lâ€™image
 */
function openLightbox(src) {
  const lightboxOverlay = document.createElement('div');
  lightboxOverlay.classList.add('lightbox-overlay');

  const image = document.createElement('img');
  image.src = src;
  image.alt = 'Agrandissement';
  image.classList.add('lightbox-image');

  // Fermer en cliquant sur lâ€™image ou overlay
  lightboxOverlay.addEventListener('click', () => {
    document.body.removeChild(lightboxOverlay);
    logEvent('info', '[Projet] Lightbox fermÃ©e');
  });

  lightboxOverlay.appendChild(image);
  document.body.appendChild(lightboxOverlay);

  logEvent('info', `[Projet] Lightbox ouverte : ${src}`);
}

/**
 * =============================================================================
 * Fonction : initKeyboardEvents
 * =============================================================================
 * Initialise la gestion des interactions clavier pour la navigation et l'accessibilitÃ©.
 *
 * - Ã‰coute les Ã©vÃ©nements `keydown` pour gÃ©rer :
 *   - La navigation au clavier dans la galerie et la lightbox.
 *   - Le focus management dans les modales (`Tab` et `Shift+Tab`).
 *   - L'activation des boutons et liens avec `EntrÃ©e` et `Espace`.
 *   - La fermeture des modales et de la lightbox avec `Ã‰chap`.
 *
 * - VÃ©rifie que l'Ã©vÃ©nement n'est pas dÃ©jÃ  attachÃ© pour Ã©viter les doublons.
 * - Capture les erreurs et les journalise pour une meilleure traÃ§abilitÃ©.
 *
 * @throws {Error} Si une erreur survient lors de l'attachement de l'Ã©vÃ©nement.
 */
function initKeyboardEvents() {
    try {
        logEvent("info", "Initialisation des Ã©vÃ©nements clavier...");

        // VÃ©rifie si l'Ã©vÃ©nement est dÃ©jÃ  attachÃ© pour Ã©viter les doublons
        if (document.__keyboardEventsAttached) {
            logEvent("warn", "Les Ã©vÃ©nements clavier sont dÃ©jÃ  attachÃ©s. Aucune action requise.");
            return;
        }

        // Attache l'Ã©vÃ©nement `keydown` pour capturer les interactions clavier
        document.addEventListener("keydown", handleKeyboardEvent);

        // Marqueur interne pour Ã©viter les attachements multiples
        document.__keyboardEventsAttached = true;

        logEvent("success", "Ã‰coute des Ã©vÃ©nements clavier activÃ©e avec succÃ¨s.");
    } catch (error) {
        logEvent("error", `Erreur critique dans initKeyboardEvents : ${error.message}`, { error });
    }
}

/** ============================================================================
 * POINT Dâ€™ENTRÃ‰E â€” Ã€ appeler depuis main.js
 * ============================================================================
 */export function initializeGlobalEventListeners() {
  document.addEventListener('DOMContentLoaded', () => {
    logEvent('success', '[Listeners] DOM chargÃ© â€” Initialisation globale...');

    bindGlobalEvents();
    dispatchPageSpecificListeners();
    // Ces fonctions doivent Ãªtre appelÃ©es uniquement si leurs Ã©lÃ©ments existent
    initModalConfirm();
    setupContactFormEvents();
    initKeyboardEvents();
  });
}